{"ast":null,"code":"import VueAxios from 'vue-axios';\nimport axios from 'axios';\n\n//1.创建\nconst request = axios.create({\n  /*   注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，\r\n      页面里面写接口的时候就不要加 '/api'了，\r\n      否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n  */\n  baseURL: '/api',\n  timeout: 5000\n});\n\n//2.设置请求\n// request 拦截器\n// 可以自请求发送前对请求做一些处理，比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // config.headers['token'] = user.token;  // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n//3. 处理响应结果\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["VueAxios","axios","request","create","baseURL","timeout","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"sources":["D:/项目文件/springboot-vue/vue_test1/src/utils/request.js"],"sourcesContent":["import VueAxios from 'vue-axios'\r\nimport axios from 'axios'\r\n\r\n//1.创建\r\nconst request = axios.create({\r\n    /*   注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，\r\n        页面里面写接口的时候就不要加 '/api'了，\r\n        否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    */\r\n    baseURL: '/api',\r\n    timeout: 5000\r\n})\r\n\r\n//2.设置请求\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理，比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    // config.headers['token'] = user.token;  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n//3. 处理响应结果\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzB;AACJ;AACA;AACA;EACIC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;;EAEjE;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEE,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACA;AACAR,OAAO,CAACI,YAAY,CAACO,QAAQ,CAACN,GAAG,CAC7BM,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAIF,QAAQ,CAACL,MAAM,CAACQ,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLS,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGV,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}